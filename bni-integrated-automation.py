# BNI Integrated Automation - Scrape TYFCB Received and Submit to Google Form
# -*- coding: utf-8 -*-
"""
‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á:
1. BNI-Lifetime-Selenuim-V5.py - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏à‡∏≤‡∏Å BNI Connect
2. google-form-selenium-automation.py - ‡∏Å‡∏£‡∏≠‡∏Å Google Form ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import time
import os
import getpass
import json
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementNotInteractableException
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime

class BNIIntegratedAutomation:
    def __init__(self):
        # BNI Connect settings
        self.bni_login_url = "https://www.bniconnectglobal.com/login"
        self.bni_dashboard_url = "https://www.bniconnectglobal.com/web/dashboard"

        # Google Form settings
        self.form_url = "https://docs.google.com/forms/d/e/1FAIpQLSfBkXWsGZXP3IXJ8gR2vZbyAi7VP3R2FSF6YB9ohkr94rIb8g/viewform"
        self.prefill_name = "Maitri+Boonkijrungpaisan"  # URL encoded name

        self.driver = None
        self.tyfcb_received = None

    def setup_driver(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome WebDriver"""
        chrome_options = Options()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô GitHub Actions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if os.getenv('GITHUB_ACTIONS'):
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-background-timer-throttling")
            chrome_options.add_argument("--disable-backgrounding-occluded-windows")
            chrome_options.add_argument("--disable-renderer-backgrounding")
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î headless ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Actions")
        else:
            chrome_options.add_argument("--start-maximized")

        chrome_options.add_argument("--disable-notifications")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option("useAutomationExtension", False)

        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            return driver
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver ‡πÑ‡∏î‡πâ: {str(e)}")
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á...")

            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                driver_path = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á ChromeDriver (‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô './chromedriver'): ")
                if not driver_path:
                    driver_path = "./chromedriver"

                service = Service(driver_path)
                driver = webdriver.Chrome(service=service, options=chrome_options)
                return driver
            except Exception as e2:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ: {str(e2)}")
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome WebDriver ‡πÑ‡∏î‡πâ")

    def get_password_with_stars(self):
        """‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô (*) ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå"""
        try:
            import msvcrt
            import sys

            password = ""
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ", end="", flush=True)

            while True:
                try:
                    char = msvcrt.getch().decode('utf-8')
                except:
                    try:
                        char = msvcrt.getch().decode('cp874')  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ö‡∏ô Windows
                    except:
                        char = msvcrt.getch().decode('latin-1')  # fallback

                # ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
                if char == '\r' or char == '\n':
                    print()
                    break
                # ‡∏Å‡∏î Backspace ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                elif char == '\b':
                    if len(password) > 0:
                        password = password[:-1]
                        print('\b \b', end="", flush=True)
                # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡∏Å‡∏ï‡∏¥
                else:
                    password += char
                    print('*', end="", flush=True)

            return password
        except:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getpass ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
            return getpass.getpass("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ")

    def login_to_bni(self, username, password):
        """‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ BNI Connect"""
        try:
            print("\nüîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ BNI Connect...")

            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            self.driver.get(self.bni_login_url)
            time.sleep(3)

            # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            try:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå username
                username_field = self.driver.find_element(By.NAME, "username")
                username_field.clear()
                username_field.send_keys(username)

                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå password
                password_field = self.driver.find_element(By.NAME, "password")
                password_field.clear()
                password_field.send_keys(password)

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
                try:
                    login_buttons = self.driver.find_elements(By.XPATH, "//button[contains(text(), 'Login') or contains(text(), 'Sign In') or contains(text(), 'Sign-in') or contains(text(), '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')]")
                    if login_buttons:
                        self.driver.execute_script("arguments[0].click();", login_buttons[0])
                    else:
                        submit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "form button[type='submit']")
                        if submit_buttons:
                            self.driver.execute_script("arguments[0].click();", submit_buttons[0])
                        else:
                            password_field.send_keys(Keys.RETURN)
                except Exception as e:
                    print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {str(e)}")
                    password_field.send_keys(Keys.RETURN)

                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
                print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
                time.sleep(10)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                current_url = self.driver.current_url
                if "login" in current_url:
                    return False, "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"

                print("‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return True, "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

            except Exception as e:
                return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {str(e)}"

        except Exception as e:
            return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {str(e)}"

    def get_tyfcb_received_from_bni(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏à‡∏≤‡∏Å BNI Connect Dashboard"""
        try:
            print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received...")

            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Dashboard
            self.driver.get(self.bni_dashboard_url)
            time.sleep(7)

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Lifetime
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Lifetime section...")
            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Lifetime
                lifetime_elements = self.driver.find_elements(By.XPATH, "//p[contains(text(), 'Lifetime')]")
                if lifetime_elements:
                    for element in lifetime_elements:
                        print(f"üìç ‡∏û‡∏ö Lifetime element: {element.text}")
                        try:
                            self.driver.execute_script("arguments[0].click();", element)
                            print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Lifetime ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                            break
                        except:
                            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà element ‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")
                else:
                    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ attribute isbackground
                    lifetime_elements = self.driver.find_elements(By.XPATH, "//*[@isbackground='true']")
                    if lifetime_elements:
                        for element in lifetime_elements:
                            if "Lifetime" in element.text:
                                print(f"üìç ‡∏û‡∏ö Lifetime ‡∏à‡∏≤‡∏Å isbackground: {element.text}")
                                try:
                                    self.driver.execute_script("arguments[0].click();", element)
                                    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Lifetime ‡∏à‡∏≤‡∏Å isbackground ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                                    break
                                except:
                                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà element ‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")

                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                time.sleep(5)

            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å Lifetime: {str(e)}")

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ TYFCB Received
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received...")
            tyfcb_received = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received"

            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° TYFCB ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏Å‡∏•‡πâ‡πÜ
                tyfcb_indicators = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'TYFCB') and contains(text(), 'Received')]")
                if tyfcb_indicators:
                    for indicator in tyfcb_indicators:
                        print(f"üìç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö TYFCB Received: {indicator.text}")
                        try:
                            # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏Å‡∏•‡πâ‡πÜ
                            parent_div = indicator.find_element(By.XPATH, "./ancestor::div[contains(@class, 'MuiBox-root')][1]")
                            money_spans = parent_div.find_elements(By.XPATH, ".//span[contains(text(), '‡∏ø')]")
                            if money_spans:
                                for span in money_spans:
                                    print(f"üí∞ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô TYFCB Received: {span.text}")
                                    tyfcb_received = span.text
                                    break
                        except Exception as e:
                            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏Å‡∏•‡πâ TYFCB Received: {str(e)}")
                            continue

                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                if tyfcb_received == "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received":
                    money_elements = self.driver.find_elements(By.XPATH, "//span[contains(text(), '‡∏ø')]")
                    if money_elements:
                        values = [element.text for element in money_elements]
                        print(f"üí∞ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {values}")
                        if values:
                            tyfcb_received = values[0]  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö

                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if tyfcb_received and tyfcb_received != "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received":
                    # ‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
                    cleaned_amount = re.sub(r'[^\d,.]', '', tyfcb_received)
                    self.tyfcb_received = cleaned_amount
                    print(f"‚úÖ TYFCB Received: {self.tyfcb_received}")
                    return True, self.tyfcb_received
                else:
                    return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received"

            except Exception as e:
                return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received: {str(e)}"

        except Exception as e:
            return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Dashboard: {str(e)}"

    def submit_to_google_form(self, tyfcb_amount):
        """‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Google Form ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB"""
        try:
            print(f"\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å Google Form ‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: {tyfcb_amount}")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° prefill data
            prefill_url = f"{self.form_url}?usp=pp_url&entry.683444359={self.prefill_name}&entry.290745485={tyfcb_amount}"
            print(f"üîó URL: {prefill_url}")

            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ form
            self.driver.get(prefill_url)
            print("üìÑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Google Form ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            time.sleep(3)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            if not os.getenv('GITHUB_ACTIONS'):
                self.driver.save_screenshot("form_page1.png")
                print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_page1.png")

            # ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Next...")
            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ jsname="OCpkoe"
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "div[jsname='OCpkoe']"))
                )
                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: jsname)")

            except TimeoutException:
                try:
                    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ class ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Next"
                    next_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//div[@role='button']//span[contains(text(), 'Next')]"))
                    )
                    print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: XPath)")

                except TimeoutException:
                    try:
                        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ class combinations
                        next_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, "div.uArJ5e.UQuaGc.YhQJj.zo8FOc.ctEux"))
                        )
                        print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: CSS classes)")

                    except TimeoutException:
                        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Next
                        all_buttons = self.driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
                        next_button = None
                        for button in all_buttons:
                            if 'Next' in button.text or '‡∏ï‡πà‡∏≠‡πÑ‡∏õ' in button.text:
                                next_button = button
                                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)")
                                break

                        if not next_button:
                            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next")
                            return False

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next
            if next_button:
                print(f"üî§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° Next: '{next_button.text}'")
                try:
                    self.driver.execute_script("arguments[0].click();", next_button)
                    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏´‡∏•‡∏î
                    time.sleep(3)

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2
                    if not os.getenv('GITHUB_ACTIONS'):
                        self.driver.save_screenshot("form_page2.png")
                        print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2 ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_page2.png")

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next: {e}")
                    return False

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å prefill ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try:
                # ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏∑‡πà‡∏≠ (entry.683444359)
                name_field = self.driver.find_element(By.XPATH, "//input[@data-params*='683444359']")
                name_value = name_field.get_attribute('value')
                print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà prefill: {name_value}")

                # ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à (entry.290745485)
                amount_field = self.driver.find_element(By.XPATH, "//input[@data-params*='290745485']")
                amount_value = amount_field.get_attribute('value')
                print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà prefill: {amount_value}")

            except Exception as e:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• prefill: {e}")
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                try:
                    name_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
                    if len(name_inputs) >= 2:
                        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
                        if not name_inputs[0].get_attribute('value'):
                            name_inputs[0].clear()
                            name_inputs[0].send_keys("Maitri Boonkijrungpaisan")
                            print("üë§ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö manual")

                        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
                        if not name_inputs[1].get_attribute('value'):
                            name_inputs[1].clear()
                            name_inputs[1].send_keys(str(tyfcb_amount))
                            print("üí∞ ‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏ö‡∏ö manual")

                except Exception as e2:
                    print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö manual: {e2}")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if not os.getenv('GITHUB_ACTIONS'):
                self.driver.save_screenshot("form_filled_page2.png")
                print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_filled_page2.png")

            # ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit...")
            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Submit ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡πà‡∏á
                submit_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Submit') or contains(text(), '‡∏™‡πà‡∏á') or contains(text(), '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')]/ancestor::div[@role='button']"))
                )

            except TimeoutException:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ role="button"
                try:
                    submit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
                    submit_button = None

                    for button in submit_buttons:
                        button_text = button.text.lower()
                        if any(word in button_text for word in ['submit', '‡∏™‡πà‡∏á', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', 'send']):
                            submit_button = button
                            break

                    if not submit_button and submit_buttons:
                        # ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° Submit)
                        submit_button = submit_buttons[-1]

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit: {e}")
                    return False

            if submit_button:
                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Submit")
                print(f"üî§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° Submit: '{submit_button.text}'")

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit
                try:
                    self.driver.execute_script("arguments[0].click();", submit_button)
                    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ form submit ‡πÄ‡∏™‡∏£‡πá‡∏à
                    time.sleep(5)

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    current_url = self.driver.current_url
                    if "formResponse" in current_url or "thanks" in current_url.lower():
                        print("üéâ Submit form ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        return True
                    else:
                        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                        print(f"URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_url}")
                        return True

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit: {e}")
                    return False
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Submit")
                return False

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å Google Form: {e}")
            return False

    def run_integrated_automation(self, username, password):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°"""
        success_steps = []

        try:
            print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô BNI Integrated Automation")
            print("=" * 70)

            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver
            print("\nüöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver...")
            self.driver = self.setup_driver()
            success_steps.append("Setup WebDriver")

            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ BNI Connect
            print("\nüîê ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ BNI Connect...")
            login_success, login_message = self.login_to_bni(username, password)
            if not login_success:
                return False, f"‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {login_message}", success_steps
            success_steps.append("Login to BNI Connect")

            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received
            print("\nüìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received...")
            tyfcb_success, tyfcb_result = self.get_tyfcb_received_from_bni()
            if not tyfcb_success:
                return False, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received: {tyfcb_result}", success_steps
            success_steps.append(f"Get TYFCB Received: {tyfcb_result}")

            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Google Form
            print(f"\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Google Form...")
            form_success = self.submit_to_google_form(tyfcb_result)
            if not form_success:
                return False, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á Google Form ‡πÑ‡∏î‡πâ", success_steps
            success_steps.append("Submit Google Form")

            return True, "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", success_steps

        except Exception as e:
            return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {str(e)}", success_steps

        finally:
            # ‡∏õ‡∏¥‡∏î WebDriver
            if self.driver:
                if not os.getenv('GITHUB_ACTIONS'):
                    try:
                        self.driver.save_screenshot("final_screen.png")
                        print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà final_screen.png")
                    except:
                        pass

                print("üîí ‡∏õ‡∏¥‡∏î WebDriver")
                self.driver.quit()


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("ü§ñ BNI Integrated Automation - ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å Google Form")
    print("=" * 80)

    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö environment variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Actions
    username = os.getenv('BNI_USERNAME')
    password = os.getenv('BNI_PASSWORD')

    if not username:
        username = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏• BNI Connect: ")

    if not password:
        # ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ getpass
        automation = BNIIntegratedAutomation()
        password = automation.get_password_with_stars()
    else:
        print("‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å environment variable")

    print(f"\nüë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {username}")
    print("üîê ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ********")

    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")

    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°
    automation = BNIIntegratedAutomation()
    success, message, completed_steps = automation.run_integrated_automation(username, password)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "=" * 70)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
    print("=" * 70)

    print("‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
    for i, step in enumerate(completed_steps, 1):
        print(f"   {i}. {step}")

    if success:
        print(f"\nüéâ {message}")
        print(f"üí∞ TYFCB Received ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ: {automation.tyfcb_received if automation.tyfcb_received else 'N/A'}")
        print("üìù Google Form ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        print(f"\n‚ùå {message}")
        print(f"üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(completed_steps)}/4")

    print("=" * 70)
    print("üèÅ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô automated environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.getenv('GITHUB_ACTIONS') and not os.getenv('CI'):
        print("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        input()

    return success


if __name__ == "__main__":
    main()