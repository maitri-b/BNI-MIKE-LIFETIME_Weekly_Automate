# Google Form Automation using Selenium with Prefilled Data
# -*- coding: utf-8 -*-

import time
import os
import json
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime

# Google Sheets API imports
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    print("Google Sheets API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install gspread google-auth")
    GOOGLE_SHEETS_AVAILABLE = False

class GoogleFormSeleniumAutomation:
    def __init__(self):
        self.form_url = "https://docs.google.com/forms/d/e/1FAIpQLSfBkXWsGZXP3IXJ8gR2vZbyAi7VP3R2FSF6YB9ohkr94rIb8g/viewform"
        self.prefill_name = "Maitri+Boonkijrungpaisan"  # URL encoded name
        self.sheet_id = "1MmuiQ2gRNbaA84YTXB2HvDR7MDIyW_buwELkkVm95Qs"  # Google Sheets ID
        self.sheet_name = "BNI TYFCB Data"
        self.driver = None

    def setup_google_sheets_client(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets API"""
        if not GOOGLE_SHEETS_AVAILABLE:
            print("Google Sheets API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return None

        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ environment variable ‡∏Å‡πà‡∏≠‡∏ô
            credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
            if credentials_json:
                credentials_info = json.loads(credentials_json)
                scope = [
                    "https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/drive"
                ]
                credentials = Credentials.from_service_account_info(credentials_info, scopes=scope)
                service_email = credentials_info.get('client_email', '‡πÑ‡∏°‡πà‡∏û‡∏ö email')
            else:
                # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå local
                credentials_file = "google-sheets-credentials.json"
                if not os.path.exists(credentials_file):
                    print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {credentials_file}")
                    return None

                scope = [
                    "https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/drive"
                ]
                credentials = Credentials.from_service_account_file(credentials_file, scopes=scope)

                # ‡∏≠‡πà‡∏≤‡∏ô service email ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
                with open(credentials_file, 'r') as f:
                    creds_data = json.load(f)
                    service_email = creds_data.get('client_email', '‡πÑ‡∏°‡πà‡∏û‡∏ö email')

            client = gspread.authorize(credentials)
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            print(f"üìß Service Account: {service_email}")
            return client

        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {str(e)}")
            return None

    def get_latest_tyfcb_received(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Google Sheets"""
        try:
            client = self.setup_google_sheets_client()
            if not client:
                return None

            # ‡πÄ‡∏õ‡∏¥‡∏î sheet ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sheet ID
            print(f"üìä ‡πÄ‡∏õ‡∏¥‡∏î Google Sheet ID: {self.sheet_id}")
            spreadsheet = client.open_by_key(self.sheet_id)
            worksheet = spreadsheet.sheet1

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_records = worksheet.get_all_records()
            print(f"üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets: {len(all_records)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

            if not all_records:
                print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets")
                return None

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            headers = list(all_records[0].keys()) if all_records else []
            print(f"üîç Headers ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {headers}")

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ TYFCB Received ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            tyfcb_received = None
            valid_record = None

            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
            for i in range(len(all_records) - 1, -1, -1):
                record = all_records[i]

                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ column ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ TYFCB ‡∏´‡∏£‡∏∑‡∏≠ Received
                possible_columns = [
                    'TYFCB Received',
                    'TYFCB received',
                    'tyfcb received',
                    'TYFCB_Received',
                    'Received',
                    '‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à Lifetime'  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                ]

                for col in possible_columns:
                    if col in record:
                        value = record[col]
                        if value and str(value).strip() != '':
                            tyfcb_received = value
                            valid_record = record
                            print(f"üéØ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô column '{col}' ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {i+2}: {value}")
                            break

                if tyfcb_received:
                    break

            if not tyfcb_received:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡πÅ‡∏ñ‡∏ß
                print("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡πÅ‡∏ñ‡∏ß:")
                for i, record in enumerate(all_records[-3:]):
                    print(f"   ‡πÅ‡∏ñ‡∏ß {len(all_records)-2+i}: {record}")
                return None

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            if isinstance(tyfcb_received, (int, float)):
                tyfcb_received_str = f"{tyfcb_received:,.0f}"
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏´‡∏°
                cleaned = re.sub(r'[^\d,.]', '', str(tyfcb_received))
                if cleaned and cleaned.replace(',', '').replace('.', '').isdigit():
                    try:
                        numeric_value = float(cleaned.replace(',', ''))
                        tyfcb_received_str = f"{numeric_value:,.0f}"
                    except:
                        tyfcb_received_str = cleaned
                else:
                    tyfcb_received_str = str(tyfcb_received).strip()

            print(f"üí∞ TYFCB Received ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {tyfcb_received_str}")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            if valid_record:
                print(f"üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {valid_record}")

            return tyfcb_received_str

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received: {e}")
            return None

    def setup_driver(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome WebDriver"""
        chrome_options = Options()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô GitHub Actions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if os.getenv('GITHUB_ACTIONS'):
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î headless ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub Actions")
        else:
            chrome_options.add_argument("--start-maximized")

        chrome_options.add_argument("--disable-notifications")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option("useAutomationExtension", False)

        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            return driver
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver ‡πÑ‡∏î‡πâ: {str(e)}")
            raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome WebDriver ‡πÑ‡∏î‡πâ")

    def fill_and_submit_form(self, tyfcb_amount):
        """‡πÄ‡∏õ‡∏¥‡∏î Google Form, ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞ submit"""
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å Google Form...")

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebDriver
            self.driver = self.setup_driver()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° prefill data
            prefill_url = f"{self.form_url}?usp=pp_url&entry.683444359={self.prefill_name}&entry.290745485={tyfcb_amount}"
            print(f"üîó URL: {prefill_url}")

            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ form
            self.driver.get(prefill_url)
            print("üìÑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Google Form ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            time.sleep(3)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            if not os.getenv('GITHUB_ACTIONS'):
                self.driver.save_screenshot("form_page1.png")
                print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_page1.png")

            # ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Next...")
            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ jsname="OCpkoe" (‡∏à‡∏≤‡∏Å HTML ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤)
                next_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, "div[jsname='OCpkoe']"))
                )
                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: jsname)")

            except TimeoutException:
                try:
                    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ class ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Next"
                    next_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, "//div[@role='button']//span[contains(text(), 'Next')]"))
                    )
                    print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: XPath)")

                except TimeoutException:
                    try:
                        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ class combinations
                        next_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, "div.uArJ5e.UQuaGc.YhQJj.zo8FOc.ctEux"))
                        )
                        print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: CSS classes)")

                    except TimeoutException:
                        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Next
                        all_buttons = self.driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
                        next_button = None
                        for button in all_buttons:
                            if 'Next' in button.text or '‡∏ï‡πà‡∏≠‡πÑ‡∏õ' in button.text:
                                next_button = button
                                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)")
                                break

                        if not next_button:
                            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next")
                            return False

            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next
            if next_button:
                print(f"üî§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°: '{next_button.text}'")
                try:
                    self.driver.execute_script("arguments[0].click();", next_button)
                    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏´‡∏•‡∏î
                    time.sleep(3)

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2
                    if not os.getenv('GITHUB_ACTIONS'):
                        self.driver.save_screenshot("form_page2.png")
                        print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà 2 ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_page2.png")

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Next: {e}")
                    return False


            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å prefill ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try:
                # ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏∑‡πà‡∏≠ (entry.683444359)
                name_field = self.driver.find_element(By.XPATH, "//input[@data-params*='683444359']")
                name_value = name_field.get_attribute('value')
                print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà prefill: {name_value}")

                # ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à (entry.290745485)
                amount_field = self.driver.find_element(By.XPATH, "//input[@data-params*='290745485']")
                amount_value = amount_field.get_attribute('value')
                print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà prefill: {amount_value}")

            except Exception as e:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• prefill: {e}")

                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                try:
                    # ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ name attribute
                    name_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
                    if len(name_inputs) >= 2:
                        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
                        if not name_inputs[0].get_attribute('value'):
                            name_inputs[0].clear()
                            name_inputs[0].send_keys("Maitri Boonkijrungpaisan")
                            print("üë§ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö manual")

                        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
                        if not name_inputs[1].get_attribute('value'):
                            name_inputs[1].clear()
                            name_inputs[1].send_keys(str(tyfcb_amount))
                            print("üí∞ ‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏ö‡∏ö manual")

                except Exception as e2:
                    print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö manual: {e2}")

            # ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit...")
            try:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Submit ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡πà‡∏á
                submit_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Submit') or contains(text(), '‡∏™‡πà‡∏á') or contains(text(), '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')]/ancestor::div[@role='button']"))
                )

            except TimeoutException:
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ role="button"
                try:
                    submit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "div[role='button']")
                    submit_button = None

                    for button in submit_buttons:
                        button_text = button.text.lower()
                        if any(word in button_text for word in ['submit', '‡∏™‡πà‡∏á', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', 'send']):
                            submit_button = button
                            break

                    if not submit_button and submit_buttons:
                        # ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° Submit)
                        submit_button = submit_buttons[-1]

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Submit: {e}")
                    return False

            if submit_button:
                print("‚úÖ ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Submit")
                print(f"üî§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°: '{submit_button.text}'")

                # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit
                try:
                    self.driver.execute_script("arguments[0].click();", submit_button)
                    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ form submit ‡πÄ‡∏™‡∏£‡πá‡∏à
                    time.sleep(5)

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    current_url = self.driver.current_url
                    if "formResponse" in current_url or "thanks" in current_url.lower():
                        print("üéâ Submit form ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        return True
                    else:
                        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ submit ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                        print(f"URL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_url}")
                        return True

                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Submit: {e}")
                    return False
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Submit")
                return False

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å form: {e}")
            return False

        finally:
            # ‡∏õ‡∏¥‡∏î WebDriver
            if self.driver:
                if not os.getenv('GITHUB_ACTIONS'):
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    try:
                        self.driver.save_screenshot("form_final.png")
                        print("üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà form_final.png")
                    except:
                        pass

                print("üîí ‡∏õ‡∏¥‡∏î WebDriver")
                self.driver.quit()

    def run(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Google Form Automation")
        print("=" * 60)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏à‡∏≤‡∏Å Google Sheets
        print("üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡∏à‡∏≤‡∏Å Google Sheets...")
        tyfcb_amount = self.get_latest_tyfcb_received()

        if not tyfcb_amount:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TYFCB Received ‡πÑ‡∏î‡πâ")
            return False

        print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å: {tyfcb_amount}")

        # ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Google Form
        print("\nüìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å Google Form...")
        success = self.fill_and_submit_form(tyfcb_amount)

        print("\n" + "=" * 60)
        if success:
            print("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Google Form ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print(f"üë§ ‡∏ä‡∏∑‡πà‡∏≠: Maitri Boonkijrungpaisan")
            print(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à Lifetime: {tyfcb_amount}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á Google Form ‡πÑ‡∏î‡πâ")

        print("üèÅ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return success


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    automation = GoogleFormSeleniumAutomation()
    success = automation.run()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô automated environment ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.getenv('GITHUB_ACTIONS') and not os.getenv('CI'):
        print("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        input()

    return success


if __name__ == "__main__":
    main()